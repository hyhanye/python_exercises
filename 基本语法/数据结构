# 列表(list)
## 关于list
List （列表）是 Python 内置的一种数据类型。 它是一种有序的集合，可以随时添加和删除其中的元素。
## 创建list
```python
members = ['小明', '小红', '小强']
```
其实列表就是用中括号 [] 括起来的数据，里面的每一个数据就叫做元素。每个元素之间使用逗号分隔。

而且列表的数据元素不一定是相同的数据类型。
比如：
```python
members = ['小明', '小红', 1.234]
```
里的元素就有字符串类型与整数类型。

## 访问list
### 通过列表的下标索引访问单个元素：
```python
members = ['小明', '小红', '小强']
print(members[0])
print(members[1])
```
在python中，下标的索引是从0开始的。

所以在上面的代码中索引0代表的是小明，索引1代表的是小红

### 访问多个元素
列表也可以一次性访问多个元素。

在访问多个元素时，引用时的区间为左闭右开区间。
```python
members = ['小明', '小红', '小强']
print(members[0:2]) # 访问第一到第二个元素
print(members[:2])  # 同上
print(members[0:])  # 访问第一个元素到最后一个元素
print(members[:])   # 访问所有元素
print(members[1:2]) # 访问第二个元素
```
### 更新列表
可以通过索引对列表的数据项进行修改或更新。
```python
members = ['小明', '小红', '小强']
print(members)
members[0] = '小白'
print(members)
```
使用append()方法来添加列表元素，新添加的元素会在列表最末尾。
```python
members = ['小明', '小红', '小强']
print(members)
members.append('小白')
print(members)
```
### 删除列表元素
当想从列表中去除某个元素时，可以使用索引删除指定元素。
```python
members = ['小明', '小红', '小强']
print(members)
del members[2]
print(members)
```
## 列表相关的运算符
列表常用的运算符如下
```python
len([1, 2, 3])         # 结果为3，len()为显示列表元素个数
[1, 2, 3] + [4, 5, 6]  # 用+将列表连接为一个列表： [1, 2, 3, 4, 5, 6]
[1]*4                  # 将列表复制4次： [1, 1, 1, 1]
2 in [1, 2, 3]         # 判断2是否在列表中
for x in [1, 2, 3]: print(x)  # 从索引0开始迭代， x依次为1，2，3
```
## 列表常用函数
```python
l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8]
obj = 2
index = 3
len(l1)                 # 列表l1中的元素数量
max(l1)                 # 列表l1中的最大值
min(l1)                 # 列表l1中的最小值
l1.append(obj)          # 在列表最末尾添加元素2
l1.count(obj)           # 统计2在l1中出现的次数
l1.index(obj)           # 找出2在l1中的索引的位置
l1.insert(index, obj)   # 在索引3的地方插入2
l2.pop(index)           # 将索引3处的值从列表中删除
```
# 元组(tuple)

## 关于tuple
tuple和List 非常类似，但是tuple并没有类似list中append一样的更新列表的方法，所以tuple一旦初始化就不能修改。

在需要
## 创建tuple
使用括号来创建元组并初始化
```python
tuple1 = ('元素1', '元素2')
tuple2 = ()                   # 空元组
tuple3 = ('只有一个',)         # 只有一个元素的元组
```

## 访问tuple
访问元组时的下标索引也是从0开始。
```python
x = ('元素1', '元素2')
print(x[0])
print(x[1])
```
## 有关tuple的函数
```python
len((1, 2, 3))
max((1, 2, 3))
min((1, 2, 3))
(1, 2, 3) + (4, 5, 6)
('hi',)*4
3 in (1, 2, 3)
for x in (1, 2, 3): print(x)
```

# 字典(dict)
## 关于dict
dict（全称dictionary）是python内置的key-value(键-值)存储结构，具有快速查找的特点。
Python 内置了 字典（dict），dict 全称 dictionary，如果学过 Java ，字典就相当于 JAVA 中的 map，使用键-值（key-value）存储，具有极快的查找速度。

## dict的创建
字典是一种可变数据结构，并且可以存储任意数据对象。
字典的每个键和值之间用冒号（:）分割，每个键值对之间用逗号（,）分割，整个字典包括在花括号({})中。
```python
dictionary = {'key1':'value', 'key2':3, 3:'33', 4:333}
```
键必须唯一，不能有重复；键所对应的值则不受此限制，可以有重复。

值可以取任意的数据类型并在之后修改，键则在创建后不可更改。

## 访问dict
使用键来快速访问对应的值。
```python
members = {1001: '小明', 1002: '小红', 1003: '小白'}  # 键为学号，值为该学号所对应的人名
print(members[1001])       # 输出： 小明
print(members[1003])       # 输出： 小白
```

## 修改dict
```python
members = {1001: '小明', 1002: '小红', 1003: '小白'}
print(members)

members[1001] = '小王'      # 将学号1001对应的人修改为小王
print(members)

members[1004] = '小强'      # 添加学号为1004的小强去 
print(members)
```

## 删除dict
使用del删除dict中的某个元素或者整个dict。
```python
members = {1001: '小明', 1002: '小红', 1003: '小白'}
print(members)

del members[1002]         # 删除学号为1002的元素
print(members)

del members               # 删除整个dict
```

也可以通过clear()方法来清除字典中的所有元素。
```python
members = {1001: '小明', 1002: '小红', 1003: '小白'}
print(members)

members.clear()       # 清除所有元素，使之成为空字典
print(members)
```

## dict的特性
* dict是不允许一个键创建两次的，但是在创建dict时如果出现了一个键值赋予了两次，会以最后一次赋予的值为准。
```python
members = {1001: '小明', 1002: '小红', 1003: '小白', 1001: '小黄'}
print(members)
```
* dict的键必须不可变，但键可以用数字，字符串或元组充当，但是不能使用列表。
* dict内部存放的顺序和key放入的顺序之间没有任何关系。
* dict的优点：查找和插入的速度极快，不会随着key的增加而变慢; dict的缺点：需要占用的内存比list多。

# 集合(set)
## 关于set
python中的set是一个无序不重复的元素集，基本功能包括消除重复元素与关系测试。
## set的创建
创建一个set时,需要提供一个list做为输入
```python
s1 = set([1, 2, 3, 4, 5, 6, 7, 8])
print(s1)

s2 = set([1, 2, 3, 4, 5, 6, 1, 2, 5, 6, 7, 8])
print(s2)
```

## set的更新
通过add()方式可以添加元素到set中。
```python
s1 = set([1, 2, 3, 4, 5, 6])
print(s1)

s1.add(7)               # 添加新的元素7
print(s1)

s1.add(7)               # 再次添加元素7，因为set中不能有重复元素，所以s1没有任何变化。
print(s1)
```

## 删除set的元素
使用remove()方法可以删除set中的元素
```python
s1 = set([1, 2, 3, 4, 5, 6])
print(s1)

s1.remove(2)
print(s1)
```